// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	customer "github.com/ngray1747/dvd-rental/customer"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: c
func (_m *Repository) Delete(c *customer.Customer) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*customer.Customer) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: q
func (_m *Repository) GetByID(q string) (*customer.Customer, error) {
	ret := _m.Called(q)

	var r0 *customer.Customer
	if rf, ok := ret.Get(0).(func(string) *customer.Customer); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customer.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: c
func (_m *Repository) Store(c *customer.Customer) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*customer.Customer) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: c
func (_m *Repository) Update(c *customer.Customer) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*customer.Customer) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
