// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dvd.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateDVDRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateDVDRequest) Reset()         { *m = CreateDVDRequest{} }
func (m *CreateDVDRequest) String() string { return proto.CompactTextString(m) }
func (*CreateDVDRequest) ProtoMessage()    {}
func (*CreateDVDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ffc8f8b3f26a27f, []int{0}
}

func (m *CreateDVDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateDVDRequest.Unmarshal(m, b)
}
func (m *CreateDVDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateDVDRequest.Marshal(b, m, deterministic)
}
func (m *CreateDVDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDVDRequest.Merge(m, src)
}
func (m *CreateDVDRequest) XXX_Size() int {
	return xxx_messageInfo_CreateDVDRequest.Size(m)
}
func (m *CreateDVDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDVDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDVDRequest proto.InternalMessageInfo

func (m *CreateDVDRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateDVDResponse struct {
	Err                  string   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateDVDResponse) Reset()         { *m = CreateDVDResponse{} }
func (m *CreateDVDResponse) String() string { return proto.CompactTextString(m) }
func (*CreateDVDResponse) ProtoMessage()    {}
func (*CreateDVDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ffc8f8b3f26a27f, []int{1}
}

func (m *CreateDVDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateDVDResponse.Unmarshal(m, b)
}
func (m *CreateDVDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateDVDResponse.Marshal(b, m, deterministic)
}
func (m *CreateDVDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDVDResponse.Merge(m, src)
}
func (m *CreateDVDResponse) XXX_Size() int {
	return xxx_messageInfo_CreateDVDResponse.Size(m)
}
func (m *CreateDVDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDVDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDVDResponse proto.InternalMessageInfo

func (m *CreateDVDResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateDVDRequest)(nil), "pb.CreateDVDRequest")
	proto.RegisterType((*CreateDVDResponse)(nil), "pb.CreateDVDResponse")
}

func init() { proto.RegisterFile("dvd.proto", fileDescriptor_3ffc8f8b3f26a27f) }

var fileDescriptor_3ffc8f8b3f26a27f = []byte{
	// 134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x29, 0x4b, 0xd1,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x52, 0xe3, 0x12, 0x70, 0x2e, 0x4a,
	0x4d, 0x2c, 0x49, 0x75, 0x09, 0x73, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2,
	0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0x54,
	0xb9, 0x04, 0x91, 0xd4, 0x15, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x09, 0x70, 0x31, 0xa7, 0x16,
	0x15, 0x41, 0xd5, 0x81, 0x98, 0x46, 0xae, 0x5c, 0x9c, 0x60, 0x05, 0x79, 0x25, 0x89, 0x39, 0x42,
	0x16, 0x5c, 0x9c, 0x70, 0x3d, 0x42, 0x22, 0x7a, 0x05, 0x49, 0x7a, 0xe8, 0x56, 0x49, 0x89, 0xa2,
	0x89, 0x42, 0x0c, 0x4e, 0x62, 0x03, 0x3b, 0xd0, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x13, 0x07,
	0x35, 0x0e, 0xad, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DVDRentalClient is the client API for DVDRental service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DVDRentalClient interface {
	CreateDVD(ctx context.Context, in *CreateDVDRequest, opts ...grpc.CallOption) (*CreateDVDResponse, error)
}

type dVDRentalClient struct {
	cc *grpc.ClientConn
}

func NewDVDRentalClient(cc *grpc.ClientConn) DVDRentalClient {
	return &dVDRentalClient{cc}
}

func (c *dVDRentalClient) CreateDVD(ctx context.Context, in *CreateDVDRequest, opts ...grpc.CallOption) (*CreateDVDResponse, error) {
	out := new(CreateDVDResponse)
	err := c.cc.Invoke(ctx, "/pb.DVDRental/CreateDVD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DVDRentalServer is the server API for DVDRental service.
type DVDRentalServer interface {
	CreateDVD(context.Context, *CreateDVDRequest) (*CreateDVDResponse, error)
}

// UnimplementedDVDRentalServer can be embedded to have forward compatible implementations.
type UnimplementedDVDRentalServer struct {
}

func (*UnimplementedDVDRentalServer) CreateDVD(ctx context.Context, req *CreateDVDRequest) (*CreateDVDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDVD not implemented")
}

func RegisterDVDRentalServer(s *grpc.Server, srv DVDRentalServer) {
	s.RegisterService(&_DVDRental_serviceDesc, srv)
}

func _DVDRental_CreateDVD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDVDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DVDRentalServer).CreateDVD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DVDRental/CreateDVD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DVDRentalServer).CreateDVD(ctx, req.(*CreateDVDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DVDRental_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DVDRental",
	HandlerType: (*DVDRentalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDVD",
			Handler:    _DVDRental_CreateDVD_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dvd.proto",
}
